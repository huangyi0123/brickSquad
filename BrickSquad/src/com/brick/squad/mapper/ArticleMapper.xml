<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.brick.squad.mapper.ArticleMapper">
	<!-- 查询 -->
	<select id="findArticleById" resultType="article" parameterType="String">
		select id,aname aname,type_id typeId,business_id
		businessId,describes,price,stock,image from
		article where id=#{id}
	</select>

	<insert id="insertArticle" parameterType="article">
		<selectKey resultType="String" keyProperty="id" order="BEFORE">
			select replace(uuid(),'-','') from dual
		</selectKey>
		insert into
		article(id,aname,type_id,business_id,price,stock,describes,image,shelfdate)
		values(#{id},#{aname},#{typeId},#{businessId},#{price},#{stock},#{describes},#{id},#{shelfdate})
	</insert>

	<delete id="deleteArticleById" parameterType="String">
		delete from article
		where id=#{id}
	</delete>

	<update id="updateArticleById" parameterType="article">
		update article set

		aname=#{aname},
		type_id=#{typeId},
		business_id=#{businessId},
		price=#{price},
		stock=#{stock},
		describes=#{describes},
		image=#{image}
		where id = #{id}
	</update>


	<select id="articlePagination" parameterType="com.brick.squad.util.Pagination"
		resultType="com.brick.squad.expand.ArticleExpand">
		SELECT a.id,a.aname,t.`name` tname,a.price,a.stock,b.shopname
		bname,a.describes
		FROM article a INNER JOIN type t ON a.type_id = t.id
		INNER JOIN business b
		ON a.business_id = b.id
		<if test="roleId!='ed270512bb8411e78d4f5254002ec43c' and roleId!='b0578c1cc05511e7aca65254002ec43c'">
		WHERE  b.id=#{userId}
		</if>
		<if test="keyword!=''">
			and(a.aname REGEXP #{keyword} or t.`name` REGEXP
			#{keyword} or b.`name`
			REGEXP #{keyword} or a.describes REGEXP
			#{keyword}) 
		</if>
		limit #{skipNum},#{takeNum}

	</select>
	<!-- 查询所有商品总数 -->
	<select id="findSearchArticleAllCount" resultType="int" 
	parameterType="String">
	SELECT COUNT(*) FROM article
	</select>

	<select id="findArticleAllCount" resultType="int"
		parameterType="com.brick.squad.util.Pagination">
		select
		count(*) FROM article a INNER JOIN type t ON a.type_id = t.id
		INNER JOIN business b
		ON a.business_id = b.id
		<if test="keyword!=''">
			where a.aname REGEXP #{keyword} or t.`name` REGEXP
			#{keyword} or b.`name`
			REGEXP #{keyword} or a.describes REGEXP
			#{keyword}
		</if>
	</select>
	<select id="findArticle" resultType="com.brick.squad.util.Select">
		SELECT id,aname name
		FROM
		article
	</select>

	<!-- <select id="findAllArticle" resultType="article"> select article.type_id 
		typeId from article </select> -->
	<select id="findAllTypeAndBusiness" resultType="article">
		SELECT
		a.id,a.aname,a.type_id typeId,a.business_id businessId,t.`name`
		tname,a.price,a.stock,b.`name`
		bname,a.describes
		FROM article a INNER
		JOIN type t ON a.type_id = t.id INNER JOIN business b
		ON a.business_id
		= b.id
	</select>

	<select id="findAllArticle" resultType="com.brick.squad.expand.ArticleExpand">
		SELECT
		a.id,a.aname,t.`name` tname,a.price,a.stock,b.`name`
		bname,a.describes
		FROM article a INNER JOIN type t ON a.type_id = t.id
		INNER JOIN
		business b
		ON a.business_id = b.id
	</select>


	<select id="findArticleAndTypeAndBusiness" parameterType="java.lang.String"
		resultType="com.brick.squad.expand.ArticleExpand">
		SELECT a.id,a.aname,t.`name` tname,a.price,a.stock,b.`name`
		bname,a.describes,a.image
		FROM article a INNER JOIN type t ON a.type_id
		= t.id INNER JOIN business b
		ON a.business_id = b.id
		WHERE a.id =
		#{id,jdbcType=VARCHAR}

	</select>


	<!-- 医疗器械查询 -->
	<select id="findArticleImgAndName" resultType="article"
		parameterType="java.lang.String">
		SELECT id,aname ,image,price,describes,shelfdate,
		stock,type_id typeId
		FROM article
		WHERE
		article.type_id=#{typeId}
	</select>
	<!-- 根据商品ID查询销售总数 -->
	<!-- SUM 是SQL语句中的标准求和函数，如果没有符合条件的记录，那么SUM函数会返回NULL。 但多数情况下，我们希望如果没有符合条件记录的情况下，我们希望它返回0，而不是NULL，那么我们可以使用例如下面的方法来处理： 
		COALESCE(sum(number),0) -->
	<select id="selectArticleSalesNumberTotalById" resultType="int"
		parameterType="java.lang.String">
		select COALESCE(sum(number),0) NumberTotal from
		order_details where
		article_id =#{id}
	</select>
	<!-- 根据商品ID查询评论总数 -->
	<select id="selectArticleRatedTotalById" resultType="int"
		parameterType="java.lang.String">
		select count(rated.id) ratedTotal from rated JOIN
		order_details on
		rated.order_id =order_details.orders_id and
		order_details.article_id
		=#{id}
	</select>
	<!-- 医疗器械热门商品查询 -->
	<select id="findArticleBuyNumberAndMedicle" resultType="com.brick.squad.expand.ArticleExpand"
		parameterType="java.lang.String">
		SELECT a.id,aname,buyNumber,price,image
		FROM article a
		JOIN
		(SELECT COUNT(*) buyNumber,article_id
		FROM order_details GROUP BY
		article_id ORDER BY buyNumber DESC)
		o ON a.id=o.article_id JOIN type t
		ON t.id=a.type_id
		WHERE t.parent_id=#{parentId}
	</select>
	<!-- 查询医疗器械类的商品总数 -->
	<select id="findCountMedicalInstruments" resultType="Integer"
		parameterType="String">
		SELECT COUNT(*)
		FROM article a
		JOIN type t ON
		t.id=a.type_id
		WHERE t.parent_id=#{parentId}
	</select>
	<!-- 查询所有医疗器械类的所有商品 -->
	<select id="findAllMedicalInstruments" parameterType="com.brick.squad.util.PageBeanUtil"
		resultType="Article">
		SELECT a.id,a.aname,a.image,a.price,a.describes
		FROM article
		a JOIN type t ON a.type_id=t.id
		WHERE t.parent_id=#{parentId} limit
		#{begin},#{limitPage}
	</select>
	<select id="findArtivleTypePage" parameterType="com.brick.squad.util.PageBeanUtil"
		resultType="Article">
			SELECT a.id,a.aname,a.image,a.price,a.describes
		FROM article
		a JOIN type t ON a.type_id=t.id
		WHERE t.parent_id=#{parentId} limit
		#{begin},#{limitPage}
	</select>
	<!-- 医疗器械根据商品的价格范围查询商品 -->
	<select id="findPriceScope" parameterType="com.brick.squad.util.PageBeanUtil"
		resultType="article">
		SELECT a.id,a.aname,a.image,a.price,a.describes
		FROM article
		a JOIN type t ON
		a.type_id=t.id
		WHERE t.parent_id=#{parentId}
		and price
		BETWEEN #{min_price} AND #{max_price}
		LIMIT #{begin},#{limitPage}
	</select>

	<!-- 搜索框搜索商品信息 -->
	<select id="findArticleTitle" parameterType="com.brick.squad.util.PageBeanUtil"
		resultType="article">
		SELECT id,aname,type_id typeId,business_id
		businessId,describes,price,stock,image,shelfdate
		FROM article
		WHERE
		aname REGEXP #{s}
		AND
		type_id=#{search_category}
		LIMIT
		#{begin},#{limitPage}
	</select>
	<select id="findArticleTitles" parameterType="com.brick.squad.util.PageBeanUtil"
		resultType="article">
		SELECT a.id,a.aname,a.image,a.price,a.describes
		FROM article
		a JOIN type t ON
		a.type_id=t.id
		WHERE t.parent_id=#{parentId}
		AND
		type_id=#{search_category}
		LIMIT #{begin},#{limitPage}
	</select>



	<!-- 获取最新商品 首页 -->
	<select id="findNewsArticleByIndex" resultType="com.brick.squad.expand.NewsArticle"
		parameterType="map">
		select
		a.id,a.aname,a.price,a.image,COALESCE(nn.total,0)
		totals from article
		a left join (select COALESCE(sum(number),0) total
		,article_id from
		order_details group by (article_id))
		nn on
		a.id=nn.article_id order by
		${order}
		DESC LIMIT 0,#{take}
	</select>

	<!-- 医疗器械类商品 价格排序 -->
	<select id="findOrderByMedicalInstruments" parameterType="com.brick.squad.util.PageBeanUtil"
		resultType="Article">
		SELECT a.id,a.aname,a.image,a.price,a.describes
		FROM article
		a JOIN type t ON a.type_id=t.id
		WHERE t.parent_id=#{parentId}
		ORDER BY
		a.price DESC limit #{begin},#{limitPage}
	</select>
	<!-- 获取商品订单数量 -->
	<select id="findArticleBuyNumber" resultType="com.brick.squad.expand.ArticleExpand">
		SELECT
		id,aname,buyNumber,price,image from article a JOIN
		(select count(*)
		buyNumber,article_id
		FROM order_details GROUP BY article_id ORDER BY
		buyNumber DESC) o on
		a.id=o.article_id
	</select>
	<!-- 医疗器械类商品 时间排序 -->
	<select id="findOrderByMedicalInstrumentsDate" parameterType="com.brick.squad.util.PageBeanUtil"
		resultType="Article">
		SELECT a.id,a.aname,a.image,a.price,a.describes

		FROM article a JOIN type t ON a.type_id=t.id
		WHERE t.parent_id=#{parentId}
		ORDER BY
		a.shelfdate
		DESC
		limit #{begin},#{limitPage}
	</select>
	<!-- 医疗器械类商品 人气排序 -->
	<select id="findOrderByMedicalInstrumentsPop" parameterType="com.brick.squad.util.PageBeanUtil"
		resultType="Article">
		SELECT a.id,a.aname,a.image,a.price,a.describes

		FROM article a JOIN type t ON a.type_id=t.id
		JOIN order_details o ON o.article_id=a.id

		WHERE t.parent_id=#{parentId}
		ORDER BY o.number DESC
		limit #{begin},#{limitPage}
	</select>


	<!-- 获取最新添加的商品 -->
	<select id="findFrontTime" resultType="com.brick.squad.expand.NewsArticle">
		select
		a.id,a.aname,a.price,a.image,a.buyersNumber,COALESCE(nn.total,0)
		totals from article
		a left join (select COALESCE(sum(number),0) total
		,article_id from
		order_details group by (article_id))
		nn on a.id=nn.article_id order by
		a.shelfdate DESC
	</select>

	<!-- 查询最新上架商品总数 -->
	<select id="findFrontTimeNumber" resultType="Integer">

		select COUNT(*) from article

	</select>

	<select id="findNewsArticle" resultType="com.brick.squad.expand.NewsArticle"
		parameterType="map">
		select
		a.id,a.aname,a.price,a.image,COALESCE(nn.total,0)
		totals from article
		a left join (select COALESCE(sum(number),0) total
		,article_id from
		order_details group by (article_id))
		nn on
		a.id=nn.article_id order by
		${order} DESC
		LIMIT #{skli},#{take}
	</select>
	<!-- 查询所有商品信息 -->
	<select id="findSearchAllArticle" resultType="com.brick.squad.expand.NewsArticle"
	parameterType="map">
	select
		a.id,a.aname,a.price,a.image,a.describes ,COALESCE(nn.total,0)
		totals from article
		a left join (select COALESCE(sum(number),0) total
		,article_id from
		order_details group by (article_id))
		nn on
		a.id=nn.article_id
		LIMIT #{skli},#{take}
</select>
<select id="findSearchAllArticleSecond" resultType="com.brick.squad.expand.NewsArticle"
	parameterType="map">
	select
		a.id,a.aname,a.price,a.image,a.describes ,COALESCE(nn.total,0)
		totals from article
		a left join (select COALESCE(sum(number),0) total
		,article_id from
		order_details group by (article_id))
		nn on
		a.id=nn.article_id
		WHERE  aname REGEXP #{s} 
		AND type_id=#{search_category}
		LIMIT #{skli},#{take}
</select>

<select id="findSearchAllArticleSecondYiLiao" resultType="com.brick.squad.expand.NewsArticle"
	parameterType="map">
		select
		a.id,a.aname,a.price,a.image,a.describes ,COALESCE(nn.total,0)
		totals from article
		a left join (select COALESCE(sum(number),0) total
		,article_id from
		order_details group by (article_id))
		nn on
		a.id=nn.article_id JOIN type t ON t.id=a.type_id
		WHERE  aname REGEXP #{s} 
		AND t.parent_id=#{search_category}
		LIMIT #{skli},#{take}
</select>

	<select id="findSearchAllArticleCountSecond" resultType="int" parameterType="String">
	SELECT COUNT(*) 
	FROM article 
	WHERE article.type_id=#{search_category}
</select>
<!-- 根据关键字查询查询所有商品信息 -->
<select id="findSearchAllArticleSecondAll"  resultType="com.brick.squad.expand.NewsArticle"
parameterType="map">
		select
		a.id,a.aname,a.price,a.image,a.describes ,COALESCE(nn.total,0)
		totals from article
		a left join (select COALESCE(sum(number),0) total
		,article_id from
		order_details group by (article_id))
		nn on
		a.id=nn.article_id
		WHERE  aname REGEXP #{s} 
		LIMIT #{skli},#{take}
</select>


<select id="findSearchAllArticleSecondOther" resultType="com.brick.squad.expand.NewsArticle"
parameterType="map">
select
		a.id,a.aname,a.price,a.image,a.describes ,COALESCE(nn.total,0)
		totals from article
		a left join (select COALESCE(sum(number),0) total
		,article_id from
		order_details group by (article_id))
		nn on
		a.id=nn.article_id
		WHERE type_id=#{search_category}
		LIMIT #{skli},#{take}
</select>



	<select id="findNewsArticles" resultType="com.brick.squad.expand.NewsArticle"
		parameterType="map">
		SELECT
		saa.*,COALESCE(oa.n,0) totals
		FROM
		(
		SELECT
		a.id,
		a.aname,
		a.price,
		a.image,
		sa.buyersNumber,
		sa.active_price
		FROM
		article a
		JOIN shop_activities sa ON a.id = sa.article_id
		WHERE
		sa.type_id = 'tuangou'
		AND sa.end_time > NOW()
		) saa
		LEFT JOIN (
		SELECT
		count(*) n,
		article_id id
		FROM
		order_details od
		GROUP BY
		(article_id)
		) oa ON saa.id = oa.id
		order by
		'${order}' DESC
		LIMIT #{skli},#{take}
	</select>
	
	<select id="findNewsArticleNumber" resultType="Integer" >
	  SELECT
COUNT(*)
FROM
	(
		SELECT
			a.id,
			a.aname,
			a.price,
			a.image,
			a.shelfdate,
			sa.buyersNumber buyersNumber,
			sa.active_price active_price
		FROM
			article a
		JOIN shop_activities sa ON a.id = sa.article_id
		WHERE
			sa.type_id = 'tuangou'
		AND sa.end_time > NOW()
	) saa
LEFT JOIN (
	SELECT
		count(*) n,
		article_id id
	FROM
		order_details od
	GROUP BY
		(article_id)
) oa ON saa.id = oa.id order by 'a.shelfdate'
</select>

	<!--查询用户最近购买的商品 -->
	<select id="findUserArticle" parameterType="map"
		resultType="com.brick.squad.expand.NewsArticle">
		SELECT a.id,a.aname,a.price,a.image,COALESCE(s.n,0) totals
		FROM (SELECT * FROM article
		WHERE id in(
		SELECT DISTINCT( od.article_id)
		id FROM order_details od JOIN
		(SELECT * FROM orders o WHERE
		o.buy_id=#{userId}
		ORDER BY o.production_date
		DESC) o
		on o.id=od.orders_id))a LEFT JOIN
		(SELECT count(*) n,id FROM
		order_details od GROUP BY od.article_id) s ON
		a.id=s.id LIMIT 0,#{take}
	</select>
	<!-- 根据父类id查找 商品TypeID-->
	<select id="findArticleTypeIdSecond" parameterType="com.brick.squad.util.PageBeanUtil" 
	resultType="String">
	SELECT a.type_id 
	FROM article a ,type t 
	WHERE a.type_id=t.id AND t.parent_id=#{parentId}
	</select>
</mapper>
