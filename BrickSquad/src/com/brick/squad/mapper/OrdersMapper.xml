<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.brick.squad.mapper.OrdersMapper">
	<sql id="Base_Column_List">
		id, no, state_id stateId, production_date
		productionDate,buy_id buyId,
		number, money,receiving_address
		receivingAddress
	</sql>
	<select id="findOrdersById" parameterType="java.lang.String"
		resultType="Orders">
		SELECT
		<include refid="Base_Column_List" />
		FROM orders WHERE id=#{id,jdbcType=VARCHAR}
	</select>
	<select id="findOrders" resultType="Orders">
		SELECT
		<include refid="Base_Column_List" />
		FROM orders
	</select>

	<insert id="insertOrders" parameterType="Orders">
		<selectKey resultType="String" keyProperty="id" order="BEFORE">
			select replace(uuid(),'-','') from dual
		</selectKey>
		INSERT INTO orders (id,
		no, state_id,
		production_date, buy_id,
		number,
		money,receiving_address)
		values
		(#{id,jdbcType=VARCHAR},
		#{no,jdbcType=VARCHAR},
		#{stateId,jdbcType=VARCHAR},
		#{productionDate,jdbcType=TIMESTAMP},
		#{buyId,jdbcType=VARCHAR},
		#{number,jdbcType=INTEGER},
		#{money,jdbcType=REAL},#{receivingAddress})
	</insert>
	<!--根据ID修改收货地址ID -->
	<update id="updateOrdersreceivingAddressById" parameterType="Orders">
		UPDATE orders
		SET
		receiving_address=#{receivingAddress}
		WHERE id = #{id}
	</update>
	<update id="updateOrdersById" parameterType="Orders">
		UPDATE orders
		SET
		state_id = #{stateId,jdbcType=VARCHAR}
		<!-- no= #{no,jdbcType=VARCHAR}, production_date = #{productionDate,jdbcType=TIMESTAMP}, 
			buy_id = #{buyId,jdbcType=VARCHAR}, number = #{number,jdbcType=INTEGER}, 
			money = #{money,jdbcType=REAL} -->
		WHERE id = #{id,jdbcType=VARCHAR}
	</update>

	<delete id="deleteOrdersById" parameterType="java.lang.String">
		DELETE FROM orders
		WHERE id = #{id,jdbcType=VARCHAR}
	</delete>
	<select id="findOrdersCount" resultType="Integer"
		parameterType="com.brick.squad.util.Pagination">
		SELECT COUNT(*)
		FROM orders o INNER JOIN buyers b ON o.buy_id=b.id
		INNER
		JOIN
		personal_information p ON b.id=p.id
		<if test="keyword!=''">
			WHERE p.`name` REGEXP #{keyword} or o.state_id REGEXP
			#{keyword} or o.`no`
			REGEXP #{keyword}
			limit #{skipNum},#{takeNum}
		</if>
	</select>
	<select id="ordersPagination" parameterType="com.brick.squad.util.Pagination"
		resultType="com.brick.squad.expand.OrdersExpand">
		<if test="keyword!=''">
			SELECT o.id,p.`name` name,o.`no`,o.state_id
			stateId,o.number,o.production_date productionDate,o.money
			FROM orders
			o INNER JOIN buyers b ON o.buy_id=b.id INNER
			JOIN personal_information
			p ON b.id=p.id
			WHERE p.`name` REGEXP #{keyword} or o.state_id REGEXP
			#{keyword} or o.`no`
			REGEXP #{keyword}
			limit #{skipNum},#{takeNum}
		</if>
		<if test="keyword==''">
			SELECT o.id,p.`name` name,o.`no`,o.state_id
			stateId,o.number,o.production_date productionDate,o.money
			FROM orders
			o INNER JOIN buyers b ON o.buy_id=b.id INNER
			JOIN personal_information
			p ON b.id=p.id limit #{skipNum},#{takeNum}
		</if>
	</select>
	<select id="findBuyserAndPersonalInformation" parameterType="java.lang.String"
		resultType="com.brick.squad.expand.OrdersExpand">
		SELECT p.`name`
		FROM orders o INNER JOIN buyers b ON
		o.buy_id=b.id INNER
		JOIN personal_information p ON b.id=p.id
		WHERE o.id
		= #{o.id,jdbcType=VARCHAR}
	</select>
	<select id="findOrdersAndBuyserById" parameterType="java.lang.String"
		resultType="com.brick.squad.expand.OrdersExpand">
		SELECT o.id,p.`name`,o.`no`,o.state_id
		stateId,o.number,o.production_date
		productionDate,o.money
		FROM orders o
		INNER JOIN buyers b ON
		o.buy_id=b.id INNER
		JOIN personal_information p
		ON b.id=p.id
		WHERE o.id=#{id,jdbcType=VARCHAR}
	</select>
	<select id="findOrderByType" parameterType="map"
		resultType="com.brick.squad.expand.OrderExpand">
		SELECT o.id oId,od.id odId, a.aname,a.price,od.number,t.`name`
		typeName FROM
		order_details
		od
		JOIN orders o on o.id=od.orders_id
		JOIN
		article a on
		od.article_id=a.id
		JOIN type t ON t.id=o.state_id
		WHERE
		o.buy_id=#{buyId}
		<if test="typeId!=null"> AND
			t.id=#{typeId}
		</if>

	</select>
</mapper>
